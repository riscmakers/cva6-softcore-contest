#!/bin/bash

######################################################################################
# Script that lets us analyze changes made to Ariane and to compare energy results
# ####################################################################################
# - Prompt user for type of simulation to run
# - Move reports generated by TCL scripts and Xilinx into dedicated "results" folder
# - TODO: Generate simulation summary report 
######################################################################################

export SIM_BEHAV=1
export SIM_POSTIMPL=2
SIM_ALL=3
GUI_MODE=0
BATCH_MODE=1

SIM_TYPE_OPTIONS="**Simulation type options**
  (1): Behavioral
  (2): Post-implementation and power analysis"

# default values, these get overwritten below
sim_type=$SIM_BEHAV
questasim_mode=$GUI_MODE

export PARENT_FPGA_DIRECTORY="$PWD/fpga"
export SIM_RISCV_LOG="$PARENT_FPGA_DIRECTORY/latest_sim.log"
export PATH_RESULTS="$PARENT_FPGA_DIRECTORY/results/latest"
export PATH_RESULTS_BEHAV="$PATH_RESULTS/behav"
export PATH_RESULTS_POSTIMPL="$PATH_RESULTS/post_impl"
export PATH_RESULTS_SUMMARY="$PATH_RESULTS/summary.txt"

# exported for child shell process
export SIM_BEHAV_READY=0
export SIM_POSTIMPL_READY=0

# dedicated command function for adding log functionality
make_and_log() {
  # $1 is the make target argument (cva6_sim, etc)
  # log standard output and standard error to screen AND log file
  # appended flag because this command will be called multiple times !
  make $1 2>&1 | tee -a $SIM_RISCV_LOG
}

read -e -p "Enter simulation name: " sim_name
read -e -p "Enter simulation description: " sim_description

read -e -p "Run QuestaSim in GUI mode (0) or batch mode (1) ? : " questasim_mode

# Error handling for sim mode
while [[ ! $questasim_mode == $BATCH_MODE ]] && [[ ! $questasim_mode == $GUI_MODE ]]
do
  echo "ERROR: '$questasim_mode' is not a valid simulation mode. Please enter a valid mode."
  read -e -p "Run QuestaSim in GUI mode (0) or batch mode (1) ? : " questasim_mode
done

# Can't run both behavioral and post impl in GUI mode because
# post impl will execute immediately after behav starts. That would take
# up a lot of RAM, so lets only let 1 GUI mode sim run
# thus if its batch_mode, we can add both sim options
if [[ $questasim_mode == $BATCH_MODE ]]
then
  SIM_TYPE_OPTIONS+="
  (3): (1) and (2)"
fi

echo -e "$SIM_TYPE_OPTIONS"

read -e -p "Enter choice: " sim_type

# Error handling for sim type
while [[ ! $sim_type == $SIM_BEHAV ]] && [[ ! $sim_type == $SIM_POSTIMPL ]] \
&& ( [[ ! $sim_type == $SIM_ALL ]] || ( [[ $sim_type == $SIM_ALL ]] && [[ $questasim_mode == $GUI_MODE ]] ))
do
  echo "ERROR: '$sim_type' is not a valid simulation type. Please enter a valid type."
  read -e -p "Enter choice: " sim_type
done

# clean up from last simulation
rm -r -f $PARENT_FPGA_DIRECTORY/reports_*
rm -r -f $PARENT_FPGA_DIRECTORY/work-sim
rm -f $SIM_RISCV_LOG
rm -f $PATH_RESULTS/description
rm -r -f $PATH_RESULTS_POSTIMPL
rm -r -f $PATH_RESULTS_BEHAV
rm -f $PATH_RESULTS_SUMMARY

# export for summary script
export sim_name
export sim_type

# export for run_cva6_sim.tcl later on
export questasim_mode

# create files and folders and continue if they exist already
mkdir -p $PATH_RESULTS
echo $sim_description > "$PATH_RESULTS/description"

# force add_sources.tcl to be regenerated, incase new source files were added
make_and_log "fpga/scripts/add_sources.tcl -B"

# here is where the log file is created
echo "[run_cva6_riscmakers]: Sim name: $sim_name || Sim type input: $sim_type || QuestaSim mode: $questasim_mode" | tee $SIM_RISCV_LOG

# Behavioral simulation starts here
if [[ $sim_type == $SIM_BEHAV ]] || [[ $sim_type == $SIM_ALL ]]
then 

  mkdir -p $PATH_RESULTS_BEHAV

  echo "[run_cva6_riscmakers] Simulation type $SIM_BEHAV started on: $(date)" | tee -a $SIM_RISCV_LOG

  if [[ $questasim_mode == $BATCH_MODE ]]
  then 
    make_and_log "cva6_sim"

    # don't source, because we 'cd' in the run_questa_batch script
    # if we source, we will end up in the wrong directory 
    # for the following 'make' command
    export SIM_BEHAV_READY=1
    "$PARENT_FPGA_DIRECTORY/scripts/run_questa_batch"
    # this last export is super important, otherwise run_questa_batch 
    # could potentially run for behav AND post impl during a single call
    export SIM_BEHAV_READY=0

  elif [[ $questasim_mode == $GUI_MODE ]]
  then
    make_and_log "cva6_sim"
  fi
  
  echo "[run_cva6_riscmakers] Simulation type $SIM_BEHAV finished on: $(date)" | tee -a $SIM_RISCV_LOG

fi

# Post implementation and power analysis simulation starts here
if [[ $sim_type == $SIM_POSTIMPL ]] || [[ $sim_type == $SIM_ALL ]]
then

  mkdir -p $PATH_RESULTS_POSTIMPL

  echo "[run_cva6_riscmakers] Simulation type $SIM_POSTIMPL started on: $(date)" | tee -a $SIM_RISCV_LOG

  if [[ $questasim_mode == $BATCH_MODE ]]
  then 
    make_and_log "cva6_sim_routed"
    echo "[run_cva6_riscmakers] Returned from make cva6_sim_routed on: $(date)" | tee -a $SIM_RISCV_LOG

    # this needs to be done before power_analysis otherwise the .saif file wont be created
    export SIM_POSTIMPL_READY=1
    "$PARENT_FPGA_DIRECTORY/scripts/run_questa_batch"
    export SIM_POSTIMPL_READY=0
    echo "[run_cva6_riscmakers] Returned from ./fpga/scripts/run_questa_batch on: $(date)" | tee -a $SIM_RISCV_LOG

    make_and_log "cva6_power_analysis"
    echo "[run_cva6_riscmakers] Returned from make cva6_power_analysis on: $(date)" | tee -a $SIM_RISCV_LOG

  elif [[ $questasim_mode == $GUI_MODE ]]
  then 
    make_and_log "cva6_sim_routed"
    make_and_log "cva6_power_analysis"
  fi

  cp -r $PARENT_FPGA_DIRECTORY/reports_cva6_sim_impl "$PATH_RESULTS_POSTIMPL"
  cp $PARENT_FPGA_DIRECTORY/work-sim/*.txt "$PATH_RESULTS_POSTIMPL"

  echo "[run_cva6_riscmakers] Simulation type $SIM_POSTIMPL finished on: $(date)" | tee -a $SIM_RISCV_LOG
fi

# Create a nice summary of the simulation results
#"$PARENT_FPGA_DIRECTORY/scripts/run_sim_summary"
